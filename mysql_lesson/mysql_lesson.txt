user : myapp_user
db : myapp
pass : yamashin

///////データベース用語///////

データベース<DB>
    - テーブル<table>
    - ビュー<view>
        - フィールド<field>／列<column>
        - レコード<record>／行<row>

<table>
    +----------+-----------+----------+
    | <field>  | <field>   | <field>  |
    +----------+-----------+----------+
    | <record> | <record>  | <record> |
    | <record> | <record>  | <record> |
    | <record> | <record>  | <record> |
    +----------+-----------+----------+

///////データ型///////
nuber
    - int
    - float
    - double
    - int unsigned      //＋のみのint型
    
string:
    - char(<num>)       //固定長
    - varchar(<num>)    //可変長
    - text
    
date/time:
    - date
    - time
    - datetime          //'2017-07-22 17:22:33'

true/false:
    - boolean -> tinyint(1)
        true -> 1
        false -> 0

enum
    - enum(<item1>, <item2>, ...)   //1つのアイテムを持つ
        <item1> = 1
        <item2> = 2
        <item2> = 3
    - set(<item1>, <item2>, ...)    //複数のアイテムを持つ
        <item1> = 2**0=1
        <item2> = 2**1=2
        <item3> = 2**2=4
        

num calculation
    - + - * / %
    - round(5.355);     -- 5
    - round(5.355, 1);  -- 5.4
    - floor(5.855);     -- 5
    - ceil(5.355);      -- 6
    - rand();           -- 0.0~1.0
    
string calculation
    -- length('Hello');         -- 5
    -- substr('Hello', 2);      -- ello
    -- substr('Hello', 2, 3);   -- ell
    -- upper('Hello');          -- HELLO
    -- lower('Hello');          -- hello
    -- concat('hello', 'World');-- Helloworld

date calculation
    -- date_add(<date>, interval <num> day)
       date_add(2018-05-24, interval 14 day)    -- 2018-06-07
    -- date_format(<date>, '%W %M %Y')
       date_format(2018-05-24, '%W %M %Y')      -- Thursday May 2018

///////コマンド一覧///////

mysql-ctl start

sudo service mysql start
・mysqlサーバの立ち上げ

mysql -u <user> -p <DB>
・<user>としてログイン
・オプションでpassの設定
・オプションで<DB>の選択

mysql -u <user> < <sql_file>
・<user>として<sql_file>を実行


///////クエリ一覧///////

select user();
・user名を表示

show databases;
・データベースの一覧表示

select database();
・現在使用しているデータベースの表示

create database <DB>;
・データベースの作成

drop database <DB>;
・データベースの削除

use <DB>;
・使用するデータベースの選択

create user <user>@<path> identified by '<pass>';
・user名：<user>, pass:<pass>でuserを作成
・Ex)
    create user dbuser01@localhost identified by 'yamashin';

grant all on <DB>.* to <user>@<path>;
・<DB>のすべてのテーブルに関するすべての権限を<user>に与える
・Ex)
    grant all on mydb01.* to dbuser01@localhost;

\. <file>
source <file>
・ファイルを読み込む

create table <table> (
    <field> <type> <option>,
    <field> <type> <option>
);
・<table>でtableを作成する．
・<フィールド名> <型> <オプション>で記述
・<オプション>
    primary key     : 主keyの設定
    auto_increment  : (主key)自動的に連番に設定
    unique          : 重複を許可しない
    default <value> : default値を<value>に設定
    not null        : nullを許可しない
・Ex)
    create table usets (
        id int unsigned primary key auto_increment,
        name varchar(20) unique,
        score float not null
    );

create table <table> <option>
・すでに存在するテーブルからテーブルを作成
・asでレコードのコピー
・Ex)
    create table users_with_team as
    select
        id,
        name,
        score,
        case
            when score > 4.0 then 'team-A'
            when score > 2.0 then 'team-B'
            else 'team-C'
        end as team
    from
        users;
・likeでフィールドのコピー
・Ex)
    create table users_empty like users;
    
show tables;
・テーブルの一覧表示

desc <table>;
・<table>の構造の確認

drop tables <table>;
・現在選択しているDBから<table>を削除

insert into <table>(<field>, <field>, <field>) values
    (<record>, <record>, <record>),
    (<record>, <record>, <record>);
・テーブルにレコードを挿入
・Ex)
    insert into users(id, name, score) values
        (2, 'kinoshita', 2.2),
        (3, 'kobayashi', 3.3),
        (4, 'kurima', null);

alter table <table> <command>
・<command>
    add column <field> <type> <option>; 
    ・<table>にフィールド(<field> <type> <option>)を追加
    ・<option>
        after <exist_field> : <exist_field>の後に<field>を追加
    ・Ex)
        alter table users add column email varchar(255) after name;
    
    drop column <field>;
    ・<table>から<field>を削除
    ・Ex)
        alter table users drop column score;
    
    change <exist_field> <field> <default> <option>;
    ・<table>の<exist_field>をフィールド(<field> <default> <option>)に変更
    ・Ex)
        alter table users change name user_name varchar(80) default 'nobody';
        
    rename <new_table>;
    ・<table>の名前を<new_table>に変更
    ・Ex)
        alter table users rename persons;
        
    add index <index> (field)
    ・<field>にインデックス<index>を設定
    
    drop index <index>
    ・<table>からインデックス<index>を削除
    
    add constraint <foreign_key> foreign key (<field1>) references <table2> (<field2>);
    ・<table>の<field1>に外部キー制約<foreign_key>を設定
    
    drop foreign key <foreign_key>;
    ・<table>の外部キー制約<foreign_key>を削除
        
select <field> as <columnname> from <table> where <option> order by <option> group by <field>
・レコードの選択
    as      : フィールドの名前を<columnname>に変更
    
    from    : フィールドを<table>から選択
        -- *(all)
        -- <field1>,<field2>

    where   : フィールドを選択する<option>を設定
        -- < > <= >= = <> !=
        -- is null, is not null
        -- and or not
        -- between <num1> and <num2>    : <num1>以上<num2>以下のレコードを返す  
        -- in(<record1>,<record2>,...)  : 含まれているレコードを返す
        -- like <str>                   : <str>(<enum>,<set>)との部分一致を行う
            binary  : 大文字と小文字の区別を行う
            %       : 1文字以上の任意の文字列
            _       : 1文字の任意の文字列
            
    order by: フィールドを<option>でソート
        -- desc         : 降順に変更
        -- rand()       : ランダム順に変更
        -- limit <num>  : 最初から<num>件分表示
        -- offset <num> : 最初から<num>件分省略
        
    group by: レコードを<field>でグルーピング
        -- desc                 : 降順に変更
        -- having <condition>   : グループに対して<condition>で条件付け（≠ where）
        
update <table> set <field> = <record>, <field> = <record>, ...  where <option>
・レコードの更新

delete from <table> when <option>
・レコードの削除

create view <view> as <select文>
・抽出条件の作成
・テーブルと同様に扱うことが可能

show create view <view>
・抽出条件の表示

start transaction
・トランザクションの開始

commit;
・トランザクション中の処理をまとめて実行

rollback;
・トランザクション中の処理を破棄

show index from <table>;
・<table>のインデックスを表示

explain select <field> from <table> where <option>;
・<field>の索引方法を表示

select <field> from <table1> (inner) join <table2> on <condition>;
・<condition>の条件に合致するレコードのみを結合した結合テーブルを作成する
・内部結合

select <field> from <table1> left (outer) join <table2> on <condition>;
・<table1>を基準に<condition>の条件に合致するレコードを結合した結合テーブルを作成する

select <field> from <table1> right (outer) join <table2> on <condition>;
・<table2>を基準に<condition>の条件に合致するレコードを結合した結合テーブルを作成する

create trigger <trigger> <condition> <command>;
・<condition>の条件時に<command>を行うトリガー<trigger>を作成する
・Ex)
    -- postsにinsertが行われた後にlogsのmsgに'post added!'を挿入する
    create trigger posts_insert_trigger after insert on posts for each row insert into logs (msg) values ('post added!');
    
    
    -- postsにupdateが行われた後にlogsのmsgに'post added!'と変更を挿入する
    delimiter //
    create trigger posts_update_trigger after update on posts for each row
        begin
            insert into logs (msg) values ('post updated!');
            insert into logs (msg) values (concat(old.title, '->', new.title));
        end;
    //
    delimiter ;

show triggers;
・現在設定されているトリガーを表示する


///////記述文法///////
・条件記述
    -- if/case : 条件の記述
    -- select文ではas を伴って新規fieldとして表示
        if(score > 5.0, 'OK', 'NG') as result
        
        case floor(score) % 2
            when 0 then 'even'
            when 1 then 'odd'
            else null
        end as type

・集計処理
    -- count()                  : アイテム数を返す
    -- sum() min() max() avg()  : 数値処理した結果を返す
    -- distinct()               : 重複を排除した結果を返す

・更新処理
    -- last_insert_id()         : 直前に挿入したレコードのidを返す

・サブクエリ
    select 
        sum(t.score),
        t.team
    from
        (select
            id,
            name,
            score,
            case
                when score > 4.0 then 'team-A'
                when score > 2.0 then 'team-B'
                else 'team-C'
            end as team
        from
            users) as t
    group by t.team;

